/*
 * ubx_2dof microblx function block (autogenerated, don't edit)
 */

#include <ubx.h>

UBX_MODULE_LICENSE_SPDX(LGPL3)

/* includes types and type metadata */

ubx_type_t types[] = {
};

/* block meta information */
char ubx_2dof_meta[] =
	" { doc='',"
	"   realtime=true,"
	"}";

/* declaration of block configuration */
ubx_proto_config_t ubx_2dof_config[] = {
	{ 0 },
};

/* declaration port block ports */
ubx_proto_port_t ubx_2dof_ports[] = {
	{ .name="pos_msr", .out_type_name="double", .out_data_len=2, .doc="Measured joint position [rad]"  },
	{ .name="vel_msr", .out_type_name="double", .out_data_len=2, .doc="Measured joint velocity [rad/s]"  },
	{ .name="vel_cmd", .in_type_name="double", .in_data_len=2, .doc="Commanded joint velocity [rad/s]"  },
	{ 0 },
};

/* declare a struct port_cache */
struct ubx_2dof_port_cache {
	ubx_port_t* pos_msr;
	ubx_port_t* vel_msr;
	ubx_port_t* vel_cmd;
};

/* helper function to cache ports. call in init */
static void update_port_cache(ubx_block_t *b, struct ubx_2dof_port_cache *pc)
{
	pc->pos_msr = ubx_port_get(b, "pos_msr");
	pc->vel_msr = ubx_port_get(b, "vel_msr");
	pc->vel_cmd = ubx_port_get(b, "vel_cmd");
}

/* define safe accessors for the new types */


/* block operation forward declarations */
int ubx_2dof_init(ubx_block_t *b);
void ubx_2dof_cleanup(ubx_block_t *b);
void ubx_2dof_step(ubx_block_t *b);

ubx_proto_block_t ubx_2dof_block = {
	.name = "ubx_2dof",
	.type = BLOCK_TYPE_COMPUTATION,
	.meta_data = ubx_2dof_meta,
	.configs = ubx_2dof_config,
	.ports = ubx_2dof_ports,

	/* ops */
	.init = ubx_2dof_init,
	.cleanup = ubx_2dof_cleanup,
	.step = ubx_2dof_step,
};


/* ubx_2dof module init and cleanup functions */
int ubx_2dof_mod_init(ubx_node_t* nd)
{
	ubx_log(UBX_LOGLEVEL_DEBUG, nd, "%s", __func__);

	for (unsigned int i=0; i<ARRAY_SIZE(types); i++) {
		if(ubx_type_register(nd, &types[i]) != 0)
			return -1;
	}

	if(ubx_block_register(nd, &ubx_2dof_block) != 0)
		return -1;

	return 0;
}

void ubx_2dof_mod_cleanup(ubx_node_t *nd)
{
	ubx_log(UBX_LOGLEVEL_DEBUG, nd, "%s", __func__);

	for (unsigned int i=0; i<ARRAY_SIZE(types); i++)
		ubx_type_unregister(nd, types[i].name);

	ubx_block_unregister(nd, "ubx_2dof");
}

/* declare module init and cleanup functions, so that the ubx core can
 * find these when the module is loaded/unloaded */
UBX_MODULE_INIT(ubx_2dof_mod_init)
UBX_MODULE_CLEANUP(ubx_2dof_mod_cleanup)
